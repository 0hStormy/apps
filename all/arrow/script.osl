// base github url for all assets, files and data
github = "https://raw.githubusercontent.com/RoturTW/apps/main/all/arrow/"

// asset urls
player_eye = github ++ "assets/Player/Eye.svg"
player_body = github ++ "assets/Player/White.svg"
player_blue = github ++ "assets/Player/Blue.svg"
arrow_main = github ++ "assets/Arrow/Main.svg"
arrow_charged = github ++ "assets/Arrow/Charged.svg"
enemy_body = github ++ "assets/Enemy/Body.svg"

map_main = "w 1.7 c #666 cutcircle 0 0 14 0 180 w 1.2 c #777 cutcircle 0 0 14 0 180 w 0.7 c #999 cutcircle 0 0 14 0 180"


crosshair = "w 3 line 7 7 10 10 line -7 7 -10 10 line -7 -7 -10 -10 line 7 -7 10 -10"


last_timer = timer
game_timer = timer


def generateStars(density, c) (
  local stars = "w 0.1 c " ++ c

  local dist = 10
  loop density (
    local dir = random(-180,180)
    local dist = random(10,200).round() / 10
    local x = dir.sin() * dist
    local y = dir.cos() * dist
    local stars += " dot" + x + y
  )
  return stars
)

stars = generateStars(100,"#777")
stars2 = generateStars(100,"#555")
stars3 = generateStars(100,"#333")

rings = "w 0.1 c #999"
for i 3 (
  for i2 36 (
    dir = i2 * 10
    rings += " dot" + x + y
  )
)

// the queue to handle loading images

window.framerate = 90

load_queue = []

dir_x = 0
dir_y = 0

// a command to simply add urls to the load_queue
def "load" "url" (
  load_queue.append(url)
)

// this command is run to reset the game
def "setup" (
  // setup the player object
  player = {
    "x":0,
    "y":0,
    "xvel":0,
    "yvel":0,
    "health":10,
    "speed":1,
    "drawspeed":500,
    "died":false,
  }
  
  notifs = []
  notif_y = 20

  // handle the arrow pullback charge feature
  mouse_down_start = game_timer
  
  // wave timer and text notification data
  current_wave = 0
  wave_popup = {
    "y":60
  }
  wave_popup.time = game_timer
  
  // a flag variable that controls the white flash when the player gets hit
  damaged = game_timer - 2
  
  // setup the max number of each thing that can exist
  enemy_cap = 40
  arrow_cap = 10
  particle_cap = 50
  bullet_cap = 1000

  // the arrays of each item to be rendered
  arrows = []
  enemies = []
  particles = []
  bullets = []
  upgrade_mode = false
  
  abilities = {
    "Dash":{
      "name":"Dash",
      "cooldown":0.5,
      "last_used":0
    },
    "Ghost":{
      "name":"Ghost",
      "cooldown":10,
      "last_used":0
    },
    "Gunner":{
      "name":"Gunner",
      "cooldown":10,
      "last_used":0
    },
    "Healer":{
      "name":"Healer",
      "cooldown":5,
      "last_used":0
    }
  }
  
  ability = ""
)

// run the setup
setup

// 'move steps' block from scratch recreation
def "move" "this.dist" (
  change direction.sin() * dist direction.cos() * dist
)

// add an arrow object to the scene
def "create_arrow" "this.x, this.y ,this.dir, this.vel" (
  if arrows.len > arrow_cap (
    arrows.delete(1)
  )
  
  arrows.append({
    "x":   x + (dir.sin() * vel * 2),
    "y":   y + (dir.cos() * vel * 2),
    "vel": vel,
    "dir": dir,
  })
)

// generate the positon from x y to world space
def position_entity(x, y) (
  return {
    "x": player.x - x * s * -1,
    "y": player.y - y * s * -1,
  }
)

// add an enemy object to the scene
def "create_enemy" "this.x, this.y, this.health, this.reload" (
  // delete enemies if the total number exceeds the cap
  if enemies.len > enemy_cap (
    enemies.delete(1)
  )
  
  enemies.append(this ++ {
    "dir": 0,
    "vel": 3,
    "size": 1,
    "last": game_timer + (random(10,30) / 10)
  })
)

// add an enemy bullet object to the scene
def "create_bullet" "this.x, this.y, this.dir, this.vel" (
  if bullets.len > bullet_cap (
    bullets.delete(1)
  )
  bullets.append(this)
)

// add a simple particle object to the scene
def "create_particle" "this.x, this.y, this.dir, this.costume" (
  if particles.len > particle_cap (
    particles.delete(1)
  )
  
  particles.append(this ++ {
    "frames": 0
  })
)

// a command to handle simple character controlling with wasd and space for dashing
def "movement" "this.speed" (
  if "d".pressed (
    player.xvel += speed
  )
  if "a".pressed (
    player.xvel -= speed
  )
  if "w".pressed (
    player.yvel += speed
  )
  if "s".pressed (
    player.yvel -= speed
  )
  goto 0 0
  pointat player.xvel player.yvel
  player.dir = direction
  if "space".onKeyDown() (
    if !boosted and (game_timer - ability.last_used > ability.cooldown) (
      switch ability.name (
        case "Dash"
          move_player 200
          break
      )
      boosted = true
      ability.last_used = game_timer
    )
  ) else (
    boosted = false
  )
  player.x += player.xvel
  player.y += player.yvel
  player.xvel *= 0.8
  player.yvel *= 0.8
  
  local d = dist(0,0,player.x,player.y) - 1730
  if d > 0 (
    pointat -player.x -player.y
    player.x += direction.sin * d
    player.y += direction.cos * d
  )
)

// add velocity to the player in the direction its facing
def "move_player" "this.speed" (
  player.xvel += player.dir.sin() * speed
  player.yvel += player.dir.cos() * speed
)

def "create_random_enemy" "this.level" (
  goto player.x player.y
  direction random(-180,180)
  create_enemy direction.sin * random(300,2000) direction.cos * random(300,2000) level level
)

def "go" "this.x, this.y" (
  goto x + cam_x y + cam_y
)

def "apply_upgrade" "this.upgrade" (
  switch this.upgrade (
    case "Faster Movement"
      player.speed += 0.5
      break
    case "Faster Reload"
      player.drawspeed *= 1.5
      break
    case "Refill Health"
      player.health = 10
      break
  )
)

for i 11 (
  load github ++ "assets/Charge/" ++ i ++ ".svg"
)

load enemy_body
load player_blue
load player_body
load player_eye
load arrow_main
load arrow_charged

per = 0
s = 0.7
s_target = 0.5

cam_x = 0
cam_y = 0

paused = false

cycles = 0

mainloop:

cycles ++

s += s_target - s / 5

c #fff
direction 90

if current_wave == 0 and ability == "" (
  loc 2 2 20 -20
  text "Pick your ability\n\n" 10
  
  each i ability_ abilities.getKeys() (
    text "Press " ++ i ++ " To Choose: " ++ ability_ ++ "\n" 10
    if i.onpress (
      ability = abilities[ability_]
      exit
    )
  )

  import "win-buttons"
  exit
)

if player.died (
  message = "You Died, press 'space' to continue"
  goto message.len * -15 0
  text message 30 : c#fff
  if "space".onpress (
    player.died = false
  )
  import "win-buttons"
  exit
)

if game_timer > (particle_timer + 0.02) and paused.not (
  goto random(-100,100) random(-100,100)
  pointat 0 0
  create_particle player.x + x_position player.y + y_position direction player_blue
  particle_timer = game_timer
)

if load_queue.len > 0 (
  for i load_queue.len (
    image load_queue[i] 0 0
    if load_queue[i].imageinfo("loaded") (
      load_queue.delete(i)
    )
    i --
  )
  loc 2 2 10 -20
  direction 90
  text load_queue.len + "Remaining" 10 : c#fff
  import "win-buttons"
  exit
)

w = window

if !paused (
  movement player.speed
  game_timer += timer - last_timer
)
last_timer = timer

cam_x += mouse_x / -5 - cam_x / 5
cam_y += mouse_y / -5 - cam_y / 10
frame w.left * 2 + cam_x w.top * 2 + cam_y w.right * 2 + cam_x w.bottom * 2 + cam_y

x = player.x
y = player.y
direction 90
goto x * -s y * -s
icon stars 100
goto x / 1.5 * -s y / 1.5 * -s
icon stars2 100
goto x / 2 * -s y / 2 * -s
icon stars3 100


for i particles.len (
  particle @= particles[i]
  pos = position_entity(particle.x, particle.y)
  goto pos.x pos.y
  direction particle.dir
  effect "transparency" particle.frames * 5
  image particle.costume 20 * s 20 * s
  if paused.not (
    particle.frames ++
    particle.x += particle.dir.sin * s * -3
    particle.y += particle.dir.cos * s * -3
    if particle.frames > 20 (
      particles.delete(i)
      i --
    )
  )
)
effect "clear"

goto 0 0
pointat player.xvel player.yvel
s_target = 0.8
if game_timer - damaged < 0.3 (
  if game_timer - damaged < 0.1 (
    s_target = 0.6
  )
  effect "brightness" 100
)

player.damage_multiplier = 1
if paused.not (
  if game_timer - ability.last_used < ability.cooldown / 2 (
    if ability.name == "Ghost" or ability.name == "Dash" (
      effect "transparency" 50
      player.damage_multiplier = 0
    )
    if ability.name == "Gunner" and cycles % 5 == 0 (
      per = 1
    )
    if ability.name == "Healer" (
      player.health += 0.01
    )
  )
)
stretch [100,100]
image player_blue 50 * s
image player_body 40 * s
pointat mouse_x mouse_y
move 40 * s
image player_eye 90 * s
move 30 * s
image github ++ "assets/Charge/" ++ (per * 10 + 1).floor() ++ ".svg" 25 * s
move -30 * s
effect "clear"

if !paused (
  if mouse_down (
    draw = game_timer - mouse_down_start * player.drawspeed
    dif = draw.clamp(0,300)
    per = dif / 300
    move 70 - (dif / 10) * s
    if draw > 2 (
      image per == 1 ? arrow_charged arrow_main 90 * s
    )
    arrow_charging = true
  ) else (
    if per * 11 > 8 (
      create_arrow player.x player.y direction per * 33
    )
    per = 0
    mouse_down_start = game_timer
  )
)

turnleft 180
player.aim = direction

// arrows
arrows_del = []
for i arrows.len (
  arrow @= arrows[i]
  if paused.not (
    arrow.x += arrow.dir.sin() * arrow.vel
    arrow.y += arrow.dir.cos() * arrow.vel
  )
  direction arrow.dir
  pos = position_entity(arrow.x,arrow.y)
  goto pos.x pos.y
  if dist(x_position,y_position,0,0) > (1500 * s) (
    arrows_del.append(i)
  )
  image arrow_main 90 * s
)
offset = 0
each i arrows_del (
  arrows.delete(i - offset)
  offset ++
)

// bullets
bullets_del = []
for i bullets.len (
  bullet @= bullets[i]
  if paused.not (
    bullet.x += bullet.dir.sin * bullet.vel
    bullet.y += bullet.dir.cos * bullet.vel
  )
  direction bullet.dir
  pos = position_entity(bullet.x, bullet.y)
  goto pos.x pos.y
  dist2 = dist(x_position,y_position,0,0)
  if dist2 > (2000 * s) (
    bullets_del.append(i)
  )
  if dist2 < (30 * s) and player.damage_multiplier != 0 (
    bullets_del.append(i)
    player.health -= player.damage_multiplier
    damaged = game_timer
  )
  image player_body 30 * s
)
offset = 0
each i bullets_del (
  bullets.delete(i - offset)
  offset ++
)

dist2 = 50 * s

// enemies
enemies_del = []
for i enemies.len (
  enemy @= enemies[i]
  x = player.x - enemy.x * -s
  y = player.y - enemy.y * -s
  goto x y
  dist00 = dist(0,0,x,y).abs()
  if random(1,3) == 1 (
    pointat player.xvel * dist00 / 15 player.yvel * dist00 / 15
  ) else (
    pointat 0 0
  )
  
  if dist00 < (2000 * s) (
    if !paused (
      if game_timer - enemy.last > 1 / enemy.reload (
        create_bullet player.x + (x / s) player.y + (y / s) direction + random(-5,5) 20
        enemy.last = game_timer
      )
      if dist00 > (300 * s) and dist2 < (500 * s) (
        enemy.x += direction.sin * enemy.vel
        enemy.y += direction.cos * enemy.vel
      ) else (
        if dist00 < dist2 (
          move_player -100
          damaged = game_timer - 0.3
          player.health -= 0.5
          enemies_del.append(i)
        )
      )
      for i2 arrows.len (
        arrow @= arrows[i2]
        pos = position_entity(arrow.x,arrow.y)
        if dist(pos.x, pos.y, x, y).abs() < dist2 (
          enemies_del.append(i)
          arrows.delete(i2)
          loop 5 (
            direction random(-180,180)
            create_particle player.x + (x / s) player.y + (y / s) direction player_main
          )
        )
      )
    )
    direction 90
    image enemy_body 80 * s * enemy.size
  )
)

offset = 0
each i enemies_del (
  enemy = enemies[i - offset]
  goto player.x - enemy.x * -s player.y - enemy.y * -s
  x = x_position
  y = y_position
  
  loop 5 (
    direction random(-180,180)
    create_particle player.x + (x / s) player.y + (y / s) direction player_main
  )

  enemies.delete(i - offset)
  notifs.insert(1,{
    "txt":  "Enemy Killed",
    "time": timer
  })

  notif_y = 0
  offset ++
)

direction 90
goto -player.x * s -player.y * s
icon map_main 135 * s
frame "clear"


player.health = player.health.clamp(0,10)

goto 0 window.bottom + 30
c #333
bar 400 0 20 player.health / 10 #fff

goto 0 window.bottom + 55
c #333
bar 200 0 15 (game_timer - ability.last_used / ability.cooldown).clamp(0,1) #fff

if player.health == 0 (
  setup
  player.died = true
)

if enemies.len == 0 (
  if current_wave % 5 == 0 (
    create_random_enemy 2
  )

  current_wave ++
  loop (current_wave * 1.5).round() (
    create_random_enemy 1
  )
  wave_popup.time = timer
  player.health ++
  if current_wave > 1 (
    upgrade_mode = true
    paused = true
  )
)

if timer - wave_popup.time < 10 (
  wave_text = "Wave" + current_wave
  goto wave_text.len * -15 window.top + wave_popup.y
  if timer - wave_popup.time < 4 (
    wave_popup.y += -40 - wave_popup.y / 10
  )
  text wave_text 30 : c#fff
)

c #fff

direction 90

if upgrade_mode (
  loc 2 2 20 -20
  text "Pick an upgrade to continue to the next wave\n\n" 10
    
  upgrades = [
    "Faster Movement",
    "Faster Reload",
    "Refill Health"
  ]
  
  each i upgrade upgrades (
    text "Press " ++ i ++ " To Upgrade: " ++ upgrade ++ "\n" 10
    if i.onpress (
      apply_upgrade upgrade
      upgrade_mode = false
      paused = false
      exit
    )
  )
) else (
  loc 2 2 10 notif_y
  each i notif notifs (
    set_x window.left + 10
    time = timer - notif.time
    pen "opacity" time > 2 ? 100 - (time - 2 * 100) 100
    text notif.txt 10
    if timer - notif.time > 3 (
      notifs.delete(i)
      i --
    )
    change_y -20
  )
  notif_y += -20 - notif_y / 10
)

c #fff
loc 2 -2 10 20
text bullets.len + enemies.len + particles.len + arrows.len + "Objects / " ++ fps + "Fps / Game Timer" + game_timer 10
import "win-buttons"
