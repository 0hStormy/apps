
// this game is unfinished, and in a beta stage

github_url = "https://raw.githubusercontent.com/RoturTW/apps/main/all/generic%20horror%20game"
base = github_url ++ "/assets/layers/base.png"
player_img = github_url ++ "/assets/player/player.png"
vignette_img = github_url ++ "/assets/player/shadows.png"
key_popup_img = github_url ++ "/assets/ui/keypopup.png"
item_slot_img = github_url ++ "/assets/ui/item-slot.png"
note_item = github_url ++ "/assets/items/note.png"
note_fullscreen = github_url ++ "/assets/ui/big-note.png"
eyes = github_url ++ "/assets/enemy/eyes.png"

assets = []
assets.append(base)
for i 12 (
  assets.append(github_url ++ "/assets/layers/trees" ++ i ++ ".png")
)
for i 8 (
  assets.append(github_url ++ "/assets/layers/building" ++ i ++ ".png")
)
assets.append(item_slot_img)
assets.append(vignette_img)
assets.append(key_popup_img)
assets.append(player_img)
assets.append(note_item)
assets.append(note_fullscreen)

window.framerate = 60
window_accent = #aaa

// keybinds
keys = {
  interact: "e",
  drop: "q",
  left: "a",
  right: "d",
  up: "w",
  down: "s"
}

zoom = 1

brightness = -100
brightness_target = 0
fisheye = -10
fisheye_target = 0

enemy_x = 0
enemy_y = 0

player_x = -150
player_y = 150
player_xv = 0
player_yv = 0
player_stretch = 100
player_stretch_target = 100
player_held_item = ""
total_collected_notes = 0
fuel_collected = 0
mul = 62.5
popup = ""

notes = [
  "There are 5 notes,\nCollect them,\nCollect fuel,\nGet out of here.\nSomething follows"
]

lantern = {
  "x": -130,
  "y":  100
}
lantern.img = github_url ++ "/assets/items/lantern.png"
assets.append(lantern.img)

def "handle_zoom" "s" (
  local w = window.width * s
  local h = window.height * s
  if w > h (
    local mul = w
  ) else (
    local mul = h
  )
  zoom = mul.toNum()
  scale = 5 * zoom
)

def "position_item" "x, y" (
  set_x player_x - x / 100 * zoom
  set_y player_y - y / 100 * zoom
)

def "apply_effects" (
  brightness += brightness_target - brightness / 10
  effect "brightness" brightness
  fisheye += fisheye_target - fisheye / 10
  effect "fisheye" fisheye
)

def "render_base" (
  position_item 0 0
  direction 90
  image base scale scale
)

def "player_controller" "speed" (
  local left = keys.left.isKeyDown()
  local right = keys.right.isKeyDown()
  local up = keys.up.isKeyDown()
  local down = keys.down.isKeyDown()
  // keybind checks
  
  if left and right.not() (
    player_xv += speed
  )
  if right and left.not() (
    player_xv -= speed
  )
  if up and down.not() (
    player_yv -= speed
  )
  if down and up.not() (
    player_yv += speed
  )
  // velocity changes
  prev_x = player_x
  prev_y = player_y
  player_x += player_xv
  player_y += player_yv
  player_xv *= 0.7
  player_yv *= 0.7
)

def "player" (
  if (player_xv * 10).round() != 0 or (player_yv * 10).round() != 0 (
    direction (timer * 400).sin() * 5 + 90
  ) else (
    direction = 0
  )
  if player_xv > 0 (
    player_stretch_target = 100
  ) else if player_xv < 0 (
    player_stretch_target = -100
  )
  player_stretch += player_stretch_target - player_stretch / 10
  goto 0 0
  stretch "x" player_stretch
  stretch "y" 100
  local s = scale / mul * 2
  image player_img s
)

def interact(key) (
  if dist(0,0,x_position,y_position) < (scale / 50) (
    change_y scale / 50
    local s = scale / 180
    image key_popup_img scale / mul
    change_x s / -2
    text key.toUpper() s : c#000
    if key.onKeyDown() (
      return true
    )
  )
  return false
)

def "render_ui" (
  vignette
  if popup != "" (
    effect "clear"
    goto 0 0
    image note_fullscreen scale / 10
    change scale / -40 scale / 40
    c #000
    text popup.wrapText(30) scale / 400
    if (player_xv.abs * 10).round > 0 or (player_yv.abs * 10).round > 0 (
      popup = ""
    )
  )
)

def "vignette" (
  direction 90
  stretch [100,100]
  
  lantern_dist = dist(lantern.x,lantern.y,player_x,player_y)
  if lantern_dist < 50 (
    brightness_target = lantern_dist.clamp(0,50) / -2
    fisheye_target = 0
  ) else (
    brightness_target = -20
    fisheye_target = (timer*100).sin * 2 - 1
  )
  if player_held_item == "lantern" (
    lantern_dist = 0
  )
  if lantern_dist < 50 (
    effect "transparency" lantern_dist.clamp(0,50) * 2
    position_item lantern.x lantern.y
    image vignette_img scale
  )
  effect "transparency" 100 - lantern_dist.clamp(0,100)
  goto 0 0
  loop 4 (
    image vignette_img scale
  )
  effect "transparency" 0
)

def "lantern" (
  position_item lantern.x lantern.y
  direction 90
  stretch [100,100]
  image lantern.img scale / mul
  if player_held_item != "lantern" (
    if interact(keys.interact) (
      player_held_item = "lantern"
    )
  ) else (
    local tx = player_x + (player_stretch_target == 100 ? 5 -5)
    lantern.x += tx - lantern.x / 5
    lantern.y += player_y - lantern.y / 5
    if "q".onpress (
      player_held_item = ""
    )
  )
)

def "notes" (
  position_item -100 90
  direction 90
  stretch [100,100]
  image note_item scale / mul
  if interact(keys.interact) (
    popup = notes[1]
  )
)

def "collision" "x, y, w, h" (
  if dist(x, y, player_x, player_y) < (w + h * 5) (
    position_item x y
    w *= scale / 62.5
    h *= scale / 62.5
    hitbox w h 0 scale / -80
    if collided (
      player_x = prev_x
      player_y = prev_y
      player_xv = 0
      player_yv = 0
    )
  )
)

def "hitboxes" (
  hitboxes_shown = false
  c #fff
  // outer walls
  collision 0 230 60 4
  collision 0 -220 60 4
  collision 220 0 4 60
  collision -220 0 4 60
  
  if player_x < 20 (
    if player_y > 0 (
      // rocks
      collision -105 145 4 4
      collision -135 210 4 4
      collision -53 199 4 7
      collision -9 210 7 1
      collision -123 60 3 3
      collision -164 45 2.5 2
      collision -189 97 3 4
      collision -183 83 2.4 2
      // dead trees
      collision -142 76 1 4
      collision -159 70 1 4
      collision -189 55 1 3
      collision -80 119 1 4
      collision -13 157 1 3
      // TREES
      collision -70 51 1 2
      collision -15 39 1 2
      collision -138 26 2 4
      // buildings
      collision -23 105 4 4
    )
    if player_y < 0 (
      // building top right
      collision -204 -172 4 10
      // TREES
      collision -29 -43 1 2
      collision -61 -79 1 2
      collision -29 -97 1 2
      // buildings
      collision -38 -152 5.5 4
      collision -117 -194 4 4
    )
  )
  if player_x > -20 (
    if player_y > 0 (
      // rocks
      collision 125 199 2 2
      collision 91 185 2.3 2
      collision 68 191 2.4 2
      collision 47 185 2 2
      collision 199 89 4 4
      collision 200 67 2 2
      // dead trees
      collision 1 174 1 2
      collision 36 183 1 2
      collision 112 184 1 2
      // power plant
      collision 96 141 4 4
      collision 166 180 10 10
      collision 139 153 7 7
      collision 142 128 3 3
      // TREE
      collision 4 120 1 2
      collision 43 102 1 2
    )
    if player_y < 0 (
      // tree cluster left
      collision 153 -60 10 4
      collision 180 -40 3 3
      // TREES
      collision 37 -39 1 2
      collision 3 -43 1 2
      collision 47 -101 1 2
    )
    // buildings
    collision 4 -142 2.8 2.5
    collision 150 53 7 6
    if player_y > 0 (
      collision 94 1 4 7
    )
    collision 153 -100 1 2
    // car
    collision 50 63 4 2
  )
)

def "obj" "inp_obj" (
  image github_url ++ "/assets/layers/" ++ inp_obj ++ ".png" scale scale
)

def "load_assets" (
  each this.i this.asset assets (
    image asset 0 0
    if asset.imageinfo("loaded") (
      assets.delete(i)
    )
  )
)

def "find_render_order" (
  before = []
  after = []
  each this.i this.y tree_ys (
    local x = tree_xs[i]
    if dist(x, y, player_x, player_y) < 150 (
      if y < player_y (
        before.append("trees" ++ i)
      ) else (
        after.append("trees" ++ i)
      )
    )
  )
  each this.i this.y building_ys (
    if (y - player_y).abs < 100 (
      if y < player_y (
        before.append("building" ++ i)
      ) else (
        after.append("building" ++ i)
      )
    )
  )
)

def "render" (
  // render behind player
  direction 90
  position_item 0 0
  each this.t before (
    obj t
  )

  notes
  lantern
  player

  // render ontop of player
  direction 90
  position_item 0 0
  each this.t after (
    obj t
  )
)


tree_xs = [
  "0","156","-1000","-1000",
  "4","30","-73","56",
  "-56","-34","-20","-136",
]
tree_ys = [
  "-44","-46","-1000","-1000",
  "111","99","47","-100",
  "-78","-96","38","16"
]
building_ys = [
  "105","-143","-100","53",
  "10","","-100","61"
]

find_render_order
load_assets
last = timer
mainloop:

apply_effects

if assets.len > 0 (
  load_assets
  loc 2 2 10 -20
  text "Loading Assets, " ++ assets.len ++ "Remaining" 10 : c#fff
  import "win-buttons"
  exit
)

if timer - last > 0.3 (
  // calculate what is infront and behind the player every 0.3 seconds
  find_render_order
)

// find correct scaling and zoom values
handle_zoom 0.7

// render the map
render_base

// render the player, trees and buildings
render

// run the hitboxes and collisions system
hitboxes

// run the player controller with a movement speed of 0.15
player_controller 0.15

direction 90
// draw the hotbar slot
render_ui
loc 2 2 10 -20
text "Notes : " ++ total_collected_notes ++ "/5" 10 : c#fff
loc 2 2 10 -40
text "Fuel  : " ++ fuel_collected ++ "/1" 10
if player_held_item != "" (
  loc 2 2 10 -60
  text "Press Q To Drop" 10
)

import "win-buttons"
