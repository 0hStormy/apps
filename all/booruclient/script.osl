import "window_tools" as "wt"
import as "glass" from "packages"
wt:load_theme
// import the theme colours

wt:seticon "image https://raw.githubusercontent.com/RoturTW/apps/refs/heads/main/all/booruclient/assets/appicon.png 20"

proxy_url = "https://proxy.mistium.com?url="

domains = {
  "https://safebooru.org":{},
  "https://konachan.net":{
    "autocomplete":"/tag.json?limit=10&name=",
    "posts":"/post.json?limit=40&tags=rating:safe ",
  }
}

/*
  "https://rule34.xxx":{},
  "https://realbooru.com":{},
  "https://tbib.org":{},
  "https://xbooru.com":{},
  "https://hypnohub.net":{},
*/
// these sites do work, however, by using them, you agree that you are over 18

domain = domains.getKeys()[1]
domain_inf = domains[domain]

query_url = domain ++ (domain_inf.autocomplete ?? "/autocomplete.php?q=")
query_temp = ""
query_fetched = true
query_results = []
// setup the query variables

main_api = domain ++ (domain_inf.posts ?? "/index.php?page=dapi&s=post&q=index&limit=50&json=1&pid=0&tags=")
main_tag = ""
main_temp = "none"
main_fetched = true
main_results = []
// setup the main api

def aspectRatio(img) (
  return img.imageinfo("width") / img.imageinfo("height")
)

def "handleRequests" (
  handleLoadingTags
  handleSearch
)

def "handleLoadingTags" (
  if main_tag != main_temp (
    main_temp = main_tag
    main_fetched = false
  )
  
  if main_fetched.not (
    data = (proxy_url ++ encodeURIComponent(main_api.strip() ++ main_tag)).getAsync()
    if data != "loading" (
      main_fetched = true
      main_results = data.destr.JsonParse()
    )
  )
)

def "handleSearch" (
  if input_search != query_temp (
    query_temp = input_search
    query_fetched = false
    // run this when the search value is updated
  )

  if query_fetched.not (
    data = (proxy_url ++ encodeURIComponent(query_url ++ query_temp)).getAsync()
    // fetch the new search data
    if data != "loading" (
      query_fetched = true
      query_results = data.JsonParse()
      // update the results array
    )
  )
)

def "renderMain" (
  goto 0 0
  glass:frame window.left window.top window.right window.bottom; frame "clear"
  prim = window_colour
  goto 0 window.top - 20
  square window.width 40 0 : c#prim
  loc 2 2 10 -20
  text "BooruClient" 10 : c#txtc
  
  local divider = window.left + 300
  local top = window.top - 50
  
  c seco
  frame window.left top divider window.bottom (
    renderSearch
  )
  
  c seco
  frame divider top window.right window.bottom main_results.len * 250 "list" (
    renderList
  )
)

def "renderSearch" (
  color prim
  local w = frame.width - 20
  set_y frame.top - 25
  square w 30 10
  input w - 10 25 "search"
  // render the search bar

  change_y -40
  // offset the position of the search results down by 30 pixels
  each i item query_results (
    set_x 0
    square w 15 10 : c#prim hover_c#seco
    if onclick (
      main_tag = item.value ?? item.name
    )
    // render the background of a search result
    
    set_x frame.left + 10
    name = item.label ?? item.name
    text name.trimText(w / 8) 8 : c#txtc
    // render the text os a search result
    
    change_y -28
    // go down by 25 pixels to render the next result
  )
)

def "renderImg" "w, url" (
  local start_w = w
  square w - 10 480 10 : c#prim
  local vid = url.endsWith(".webm") or url.endsWith(".mp4")
  if url.imageinfo("loaded") or url.videoinfo("loaded") (
    iw = vid ? url.videoinfo("width") url.imageinfo("width")
    ih = vid ? url.videoinfo("height") url.imageinfo("height")
    
    h = 480 / ih
    if h > w / iw (
      h = null
    ) else (
      w = null
      h = 480
    )
    if vid (
      video url "play"
      video url w h
    ) else (
      image url w h
    )
    local pos = x_position
    local x = start_w / 2 - 20
    change x 225
    square 20 20 10 : c#prim hover_c#seco
    if onclick (
      clipboard "set" url
    )
    icon "copy" 0.8 : c#txtc
    change_x x * -2
    text iw ++ "x" ++ ih 8
    set_x pos
    change_y -225
  ) else (
    if vid (
      video url 0
    ) else (
      image url 0
    )
    direction timer * 200
    icon "cutcircle 0 0 10 0 90" 2 : c#txtc
    direction 90
  )
)

def getUrl(obj) (
  local url = obj.jpeg_url ?? obj.file_url ?? "none"
  if url.startsWith("https://") (
    return encodeURIComponent(url)
  )
  return domain ++ "/images/" ++ obj.directory ++ "/" ++ obj.image
)

def "renderList" (
  local w = frame.width - 20 / 2
  set_y frame.top - 250 + scroll_ylist
  y = y_position
  ft = frame.top + 250
  fb = frame.bottom - 250
  lp = frame.left + (frame.width / 4)
  rp = frame.right - (frame.width / 4)
  i = 1
  loop main_results.len / 2 (
    if y < ft and y > fb (
      set_x lp
      renderImg w proxy_url ++ getUrl(main_results[i])
      i ++
      
      set_x rp
      renderImg w proxy_url ++ getUrl(main_results[i])
      i ++
    ) else (
      i += 2
    )
    y -= 500
    change_y -500
  )
)

mainloop:

renderMain
handleRequests

import "win-buttons"
